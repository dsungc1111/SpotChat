//
//  MapVC.swift
//  SpotChat
//
//  Created by ÏµúÎåÄÏÑ± on 10/29/24.
//

import UIKit
import Combine
import CoreLocation
import MapKit



final class MapVC: BaseVC {
    
    private let mapView = MapView()
    private var cancellables = Set<AnyCancellable>()
    private let temp = CLLocationCoordinate2D(latitude: 37.79181196691732, longitude: 128.9071798324585)
    
    private var sampleGeoResult: [PostModel] = []
    
    private var geoResult: [PostModel] = [] {
        didSet {
            mapView.detailCollectionView.reloadData()
        }
    }
    
    private var userFollower: [Follow] = [] {
        didSet {
            mapView.storyCollectionView.reloadData()
        }
    }
    
    var currentIndex: CGFloat = 0
    
    
    override func loadView() {
        view = mapView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setMapView()
        setAnnotation()
        mapView.map.delegate = self
        addTemporaryUserLocation()
        setupCollectionView()
    }
    
    override func bind() {
        mapView.myPinBtn.tapPublisher
            .sink { [weak self] _ in
                guard let self else { return }
                let region = MKCoordinateRegion(center: temp, latitudinalMeters: 500, longitudinalMeters: 500)
                mapView.map.setRegion(region, animated: true)
            }
            .store(in: &cancellables)
        
        mapView.radiusSetBtn.tapPublisher
            .sink { [weak self] _ in
                guard let self else { return }
                showDistanceSelection()
            }
            .store(in: &cancellables)
    }
    
    private func setupCollectionView() {
        mapView.storyCollectionView.dataSource = self
        mapView.storyCollectionView.delegate = self
        mapView.detailCollectionView.dataSource = self
        mapView.detailCollectionView.delegate = self
    }
    
    func setMapView() {
        // ÏßÄÎèÑÏùò Ï§ëÏã¨ Ï¢åÌëúÏôÄ Ï§å Î†àÎ≤® ÏÑ§Ï†ï
        let center = CLLocationCoordinate2D(latitude: 37.7950773, longitude: 128.8966344)
        let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05))
        mapView.map.setRegion(region, animated: true)
    }
    
    // Ï¥àÍ∏∞ÏÑ∏ÌåÖ - 2000m Î≤îÏúÑ
    func setAnnotation() {
        
        fetchGeolocationData(maxDistance: "1000")
    }
    
    func addTemporaryUserLocation() {
        let tempAnnotation = MKPointAnnotation()
        tempAnnotation.coordinate = temp
        tempAnnotation.title = "ÎÇ¥ ÏúÑÏπò"
        mapView.map.addAnnotation(tempAnnotation)
    }
}

// MARK: - ÎÑ§Ìä∏ÏõåÌÅ¨
extension MapVC {
    
    private func showDistanceSelection() {
        let alert = UIAlertController(title: "Í±∞Î¶¨ ÏÑ†ÌÉù", message: "Í≤ÄÏÉâÌï† Í±∞Î¶¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.", preferredStyle: .actionSheet)
        
        // Í±∞Î¶¨ ÏòµÏÖò Î∞∞Ïó¥
        let distances = [500, 1000, 2000, 3000]
        
        
        distances.forEach { distance in
            alert.addAction(UIAlertAction(title: "\(distance)m", style: .default, handler: { [weak self] _ in
                
                self?.fetchGeolocationData(maxDistance: "\(distance)")
            }))
        }
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel, handler: nil))
        
        if let popoverController = alert.popoverPresentationController {
            popoverController.sourceView = mapView.radiusSetBtn
            popoverController.sourceRect = mapView.radiusSetBtn.bounds
        }
        
        present(alert, animated: true, completion: nil)
    }
    
    private func fetchGeolocationData(maxDistance: String) {
        
        Task {
            
            guard let maxDistance = Double(maxDistance) else { return }
            
            let region = MKCoordinateRegion(center: temp, latitudinalMeters: maxDistance, longitudinalMeters: maxDistance)
            mapView.map.setRegion(region, animated: true)
            
            let geolocationQuery = GeolocationQuery(longitude: "128.90782356262207", latitude: "37.805477856609954", maxDistance: "\(maxDistance)")
            
            do {
                let result = try await NetworkManager2.shared.performRequest(router: .geolocationBasedSearch(query: geolocationQuery), responseType: PostDataModel.self)
                
                
                
                for i in 0..<result.data.count {
                    let annotation = MKPointAnnotation()
                    annotation.coordinate = CLLocationCoordinate2D(latitude: result.data[i].geolocation.latitude, longitude: result.data[i].geolocation.longitude)
                    
                    annotation.subtitle = result.data[i].content1
                    geoResult.append(result.data[i])
                    sampleGeoResult.append(result.data[i])
                    mapView.map.addAnnotation(annotation)
                }
                
            } catch {
                print("Error fetching geolocation data: \(error)")
            }
            
            
            do {
                let userInfo = try await NetworkManager2.shared.performRequest(router: .myProfile, responseType: ProfileModel.self)
                
                print("üößüößüößüößüößüößüößüößüöß = ", userInfo.following)
                print("dfsdfdsfdsfdf", geoResult.count)
                
                let followingSet = Set(userInfo.following.map { $0.userID })
                var addedUserIDs = Set(userFollower.map { $0.userID })

                for geo in geoResult {
                    let creatorID = geo.creator.userID

                    if followingSet.contains(creatorID) && !addedUserIDs.contains(creatorID) {
                        if let matchingUser = userInfo.following.first(where: { $0.userID == creatorID }) {
                            userFollower.append(matchingUser)
                            addedUserIDs.insert(creatorID)
                        }
                    }
                }
                
                print("ü•∂ü•∂ü•∂ü•∂ü•∂ü•∂ü•∂ü•∂ü•∂ü•∂ÌåîÎ°úÏõå ÏÜåÍ∞ú ÎìúÍ∞ëÎãàÎã§Ïù¥ ~ ", userFollower)
                
            } catch {
                print("Ïú†Ï†Ä ÏóêÎü¨")
            }
        }
    }
}

// MARK: - Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò
extension MapVC: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard !(annotation is MKUserLocation) else {
            return nil
        }
        
        let identifier = "CustomAnnotationView"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier) as? MKMarkerAnnotationView
        
        if annotationView == nil {
            annotationView = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            annotationView?.canShowCallout = true
        } else {
            annotationView?.annotation = annotation
        }
        
        annotationView?.markerTintColor = AppColorSet.keyColor
        return annotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect annotation: MKAnnotation) {
        
        guard let subtitle = annotation.subtitle as? String else { return }
        
        
        
        print("subtitleüî´üî´üî´üî´üî´üî´üî´üî´üî´üî´ = ", subtitle)
        let filteredPosts = sampleGeoResult.filter { $0.content1 == subtitle }
        
        if let matchedPost = filteredPosts.first {
            updateDetailCollectionView(with: matchedPost)
        }
    }
    private func updateDetailCollectionView(with post: PostModel) {
        // ÏÑ†ÌÉùÎêú Ìè¨Ïä§Ìä∏Îßå ÌëúÏãú
        geoResult = [post]  // `geoResult`Î•º Ïû¨Ï†ïÏùòÌïòÏó¨ Ïª¨Î†âÏÖòÎ∑∞Î•º ÏóÖÎç∞Ïù¥Ìä∏
        
        
//        Task {
//            
//            let geolocationQuery = GeolocationQuery(longitude: "128.90782356262207", latitude: "37.805477856609954", maxDistance: "\(2000)")
//            
//            do {
//                let result = try await NetworkManager2.shared.performRequest(router: .geolocationBasedSearch(query: geolocationQuery), responseType: PostDataModel.self)
//                
//                geoResult = result.data
//                
//            } catch {
//                print("ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ geomodel ÏõêÎûòÎ°ú Î≥µÍ∑Ä")
//            }
//        }
        
    }
}

// MARK: - Ïª¨Î†âÏÖòÎ∑∞
extension MapVC: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        
        if collectionView == mapView.storyCollectionView {
            return userFollower.count
        } else {
            return geoResult.count
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if collectionView == mapView.storyCollectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: StoryCollectionViewCell.identifier, for: indexPath) as! StoryCollectionViewCell
            
            cell.configureCell(following: userFollower[indexPath.item])
            
            
            return cell
            
        } else if collectionView == mapView.detailCollectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DetailCollectionViewCell.identifier, for: indexPath) as! DetailCollectionViewCell
            
            cell.configureCell(geoModel: geoResult[indexPath.item])
            return cell
        }
        
        return UICollectionViewCell()
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print(indexPath.item, "Î≤à ÏÑ†ÌÉù!!!!!!!!!")
        
        
        
        
    }
}


// MARK: - Ïª¨Î†âÏÖòÎ∑∞ ÌéòÏù¥Ïßï
extension MapVC : UIScrollViewDelegate {
    
    func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        
        // itemÏùò ÏÇ¨Ïù¥Ï¶àÏôÄ item Í∞ÑÏùò Í∞ÑÍ≤© ÏÇ¨Ïù¥Ï¶àÎ•º Íµ¨Ìï¥ÏÑú ÌïòÎÇòÏùò item ÌÅ¨Í∏∞Î°ú ÏÑ§Ï†ï.
        guard let collectionView = scrollView as? UICollectionView else { return }
        let layout = collectionView.collectionViewLayout as! UICollectionViewFlowLayout
        let cellWidthIncludingSpacing = layout.itemSize.width + layout.minimumLineSpacing
        // targetContentOffÏùÑ Ïù¥Ïö©ÌïòÏó¨ xÏ¢åÌëúÍ∞Ä ÏñºÎßàÎÇò Ïù¥ÎèôÌñàÎäîÏßÄ ÌôïÏù∏
        // Ïù¥ÎèôÌïú xÏ¢åÌëú Í∞íÍ≥º itemÏùò ÌÅ¨Í∏∞Î•º ÎπÑÍµêÌïòÏó¨ Î™á ÌéòÏù¥ÏßïÏù¥ Îê† Í≤ÉÏù∏ÏßÄ Í∞í ÏÑ§Ï†ï
        var offset = targetContentOffset.pointee
        let index = (offset.x + scrollView.contentInset.left) / cellWidthIncludingSpacing
        var roundedIndex = round(index)
        
        // scrollView, targetContentOffsetÏùò Ï¢åÌëú Í∞íÏúºÎ°ú Ïä§ÌÅ¨Î°§ Î∞©Ìñ•ÏùÑ Ïïå Ïàò ÏûàÎã§.
        // indexÎ•º Î∞òÏò¨Î¶ºÌïòÏó¨ ÏÇ¨Ïö©ÌïòÎ©¥ itemÏùò Ï†àÎ∞ò ÏÇ¨Ïù¥Ï¶àÎßåÌÅº Ïä§ÌÅ¨Î°§ÏùÑ Ìï¥Ïïº ÌéòÏù¥ÏßïÏù¥ ÎêúÎã§.
        // Ïä§ÌÅ¨Î°úÎ°ú Î∞©Ìñ•ÏùÑ Ï≤¥ÌÅ¨ÌïòÏó¨ Ïò¨Î¶º,ÎÇ¥Î¶ºÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ Ï¢Ä Îçî ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌéòÏù¥Ïßï Ìö®Í≥ºÎ•º ÎÇº Ïàò ÏûàÎã§.
        if scrollView.contentOffset.x > targetContentOffset.pointee.x {
            roundedIndex = floor(index)
        } else if scrollView.contentOffset.x < targetContentOffset.pointee.x {
            roundedIndex = ceil(index)
        } else {
            roundedIndex = round(index)
        }
        
        if currentIndex > roundedIndex {
            currentIndex -= 1
            roundedIndex = currentIndex
        } else if currentIndex < roundedIndex {
            currentIndex += 1
            roundedIndex = currentIndex
        }
        
        offset = CGPoint(x: roundedIndex * cellWidthIncludingSpacing - scrollView.contentInset.left, y: -scrollView.contentInset.top)
        targetContentOffset.pointee = offset
    }
}

